"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.unparse = exports.showNxWarning = void 0;
const path = require("path");
const child_process_1 = require("child_process");
const output_1 = require("./output");
const flat_1 = require("flat");
/*
 * Because we don't want to depend on @nrwl/workspace (to speed up the workspace creation)
 * we duplicate the helper functions from @nrwl/workspace in this file.
 */
function showNxWarning(workspaceName) {
    try {
        const pathToRunNxCommand = path.resolve(process.cwd(), workspaceName);
        child_process_1.execSync('nx --version', {
            cwd: pathToRunNxCommand,
            stdio: ['ignore', 'ignore', 'ignore'],
        });
    }
    catch (e) {
        // no nx found
        output_1.output.addVerticalSeparator();
        output_1.output.note({
            title: `Nx CLI is not installed globally.`,
            bodyLines: [
                `This means that you might have to use "yarn nx" or "npx nx" to execute commands in the workspace.`,
                `Run "yarn global add nx" or "npm install -g nx" to be able to execute command directly.`,
            ],
        });
    }
}
exports.showNxWarning = showNxWarning;
function unparse(options) {
    const unparsed = [];
    for (const key of Object.keys(options)) {
        const value = options[key];
        unparseOption(key, value, unparsed);
    }
    return unparsed;
}
exports.unparse = unparse;
function unparseOption(key, value, unparsed) {
    if (value === true) {
        unparsed.push(`--${key}`);
    }
    else if (value === false) {
        unparsed.push(`--no-${key}`);
    }
    else if (Array.isArray(value)) {
        value.forEach((item) => unparseOption(key, item, unparsed));
    }
    else if (Object.prototype.toString.call(value) === '[object Object]') {
        const flattened = flat_1.flatten(value, { safe: true });
        for (const flattenedKey in flattened) {
            unparseOption(`${key}.${flattenedKey}`, flattened[flattenedKey], unparsed);
        }
    }
    else if (typeof value === 'string' && value.includes(' ')) {
        unparsed.push(`--${key}="${value}"`);
    }
    else if (value != null) {
        unparsed.push(`--${key}=${value}`);
    }
}
//# sourceMappingURL=shared.js.map