"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectInvokedPackageManager = exports.getPackageManagerVersion = exports.getPackageManagerCommand = exports.detectPackageManager = void 0;
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const path_1 = require("path");
function detectPackageManager(dir = '') {
    return fs_1.existsSync(path_1.join(dir, 'yarn.lock'))
        ? 'yarn'
        : fs_1.existsSync(path_1.join(dir, 'pnpm-lock.yaml'))
            ? 'pnpm'
            : 'npm';
}
exports.detectPackageManager = detectPackageManager;
/**
 * Returns commands for the package manager used in the workspace.
 * By default, the package manager is derived based on the lock file,
 * but it can also be passed in explicitly.
 *
 * Example:
 *
 * ```javascript
 * execSync(`${getPackageManagerCommand().addDev} my-dev-package`);
 * ```
 *
 */
function getPackageManagerCommand(packageManager = detectPackageManager()) {
    var _a;
    switch (packageManager) {
        case 'yarn':
            return {
                install: 'yarn',
                add: 'yarn add',
                addDev: 'yarn add -D',
                rm: 'yarn remove',
                exec: 'yarn',
                run: (script, args) => `yarn ${script} ${args}`,
                list: 'yarn list',
            };
        case 'pnpm':
            return {
                install: 'pnpm install --no-frozen-lockfile',
                add: 'pnpm add',
                addDev: 'pnpm add -D',
                rm: 'pnpm rm',
                exec: 'pnpx',
                run: (script, args) => `pnpm run ${script} -- ${args}`,
                list: 'pnpm ls --depth 100',
            };
        case 'npm':
            process.env.npm_config_legacy_peer_deps =
                (_a = process.env.npm_config_legacy_peer_deps) !== null && _a !== void 0 ? _a : 'true';
            return {
                install: 'npm install',
                add: 'npm install',
                addDev: 'npm install -D',
                rm: 'npm rm',
                exec: 'npx',
                run: (script, args) => `npm run ${script} -- ${args}`,
                list: 'npm ls',
            };
    }
}
exports.getPackageManagerCommand = getPackageManagerCommand;
function getPackageManagerVersion(packageManager) {
    return child_process_1.execSync(`${packageManager} --version`).toString('utf-8').trim();
}
exports.getPackageManagerVersion = getPackageManagerVersion;
/**
 * Detects which package manager was used to invoke create-nx-{plugin|workspace} command
 * based on the main Module process that invokes the command
 * - npx returns 'npm'
 * - pnpx returns 'pnpm'
 * - yarn create returns 'yarn'
 *
 * Default to 'npm'
 */
function detectInvokedPackageManager() {
    let detectedPackageManager = 'npm';
    // mainModule is deprecated since Node 14, fallback for older versions
    const invoker = require.main || process['mainModule'];
    // default to `npm`
    if (!invoker) {
        return detectedPackageManager;
    }
    for (const pkgManager of ['pnpm', 'yarn', 'npm']) {
        if (invoker.path.includes(pkgManager)) {
            detectedPackageManager = pkgManager;
            break;
        }
    }
    return detectedPackageManager;
}
exports.detectInvokedPackageManager = detectInvokedPackageManager;
//# sourceMappingURL=package-manager.js.map