#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Preset = void 0;
const tslib_1 = require("tslib");
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const enquirer = require("enquirer");
const path = require("path");
const tmp_1 = require("tmp");
const yargsParser = require("yargs-parser");
const shared_1 = require("./shared");
const output_1 = require("./output");
const ora = require("ora");
const package_manager_1 = require("./package-manager");
var Preset;
(function (Preset) {
    Preset["Empty"] = "empty";
    Preset["NPM"] = "npm";
    Preset["WebComponents"] = "web-components";
    Preset["Angular"] = "angular";
    Preset["AngularWithNest"] = "angular-nest";
    Preset["React"] = "react";
    Preset["ReactWithExpress"] = "react-express";
    Preset["ReactNative"] = "react-native";
    Preset["NextJs"] = "next";
    Preset["Gatsby"] = "gatsby";
    Preset["Nest"] = "nest";
    Preset["Express"] = "express";
})(Preset = exports.Preset || (exports.Preset = {}));
const presetOptions = [
    {
        name: Preset.Empty,
        message: 'empty             [an empty workspace with a layout that works best for building apps]',
    },
    {
        name: Preset.NPM,
        message: 'npm               [an empty workspace set up to publish npm packages (similar to and compatible with yarn workspaces)]',
    },
    {
        name: Preset.React,
        message: 'react             [a workspace with a single React application]',
    },
    {
        name: Preset.Angular,
        message: 'angular           [a workspace with a single Angular application]',
    },
    {
        name: Preset.NextJs,
        message: 'next.js           [a workspace with a single Next.js application]',
    },
    {
        name: Preset.Gatsby,
        message: 'gatsby            [a workspace with a single Gatsby application]',
    },
    {
        name: Preset.Nest,
        message: 'nest              [a workspace with a single Nest application]',
    },
    {
        name: Preset.Express,
        message: 'express           [a workspace with a single Express application]',
    },
    {
        name: Preset.WebComponents,
        message: 'web components    [a workspace with a single app built using web components]',
    },
    {
        name: Preset.ReactNative,
        message: 'react-native      [a workspace with a single React Native application]',
    },
    {
        name: Preset.ReactWithExpress,
        message: 'react-express     [a workspace with a full stack application (React + Express)]',
    },
    {
        name: Preset.AngularWithNest,
        message: 'angular-nest      [a workspace with a full stack application (Angular + Nest)]',
    },
];
const tsVersion = '~4.3.5';
const cliVersion = '12.9.0';
const nxVersion = '12.9.0';
const prettierVersion = '2.3.2';
const parsedArgs = yargsParser(process.argv.slice(2), {
    string: [
        'name',
        'cli',
        'preset',
        'appName',
        'style',
        'defaultBase',
        'packageManager',
    ],
    alias: {
        packageManager: 'pm',
    },
    boolean: ['help', 'interactive', 'nxCloud'],
    default: {
        interactive: false,
    },
    configuration: {
        'strip-dashed': true,
        'strip-aliased': true,
    },
});
if (parsedArgs.help) {
    showHelp();
    process.exit(0);
}
(function main() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const packageManager = parsedArgs.packageManager || package_manager_1.detectInvokedPackageManager();
        const { name, cli, preset, appName, style, nxCloud } = yield getConfiguration(parsedArgs);
        output_1.output.log({
            title: 'Nx is creating your workspace.',
            bodyLines: [
                'To make sure the command works reliably in all environments, and that the preset is applied correctly,',
                `Nx will run "${packageManager} install" several times. Please wait.`,
            ],
        });
        const tmpDir = yield createSandbox(packageManager);
        yield createApp(tmpDir, name, packageManager, Object.assign(Object.assign({}, parsedArgs), { cli,
            preset,
            appName,
            style,
            nxCloud }));
        let nxCloudInstallRes;
        if (nxCloud) {
            nxCloudInstallRes = yield setupNxCloud(name, packageManager);
        }
        shared_1.showNxWarning(name);
        pointToTutorialAndCourse(preset);
        if (nxCloud && nxCloudInstallRes.code === 0) {
            printNxCloudSuccessMessage(nxCloudInstallRes.stdout);
        }
    });
})().catch((error) => {
    const { version } = require('../package.json');
    output_1.output.error({
        title: `Something went wrong! v${version}`,
    });
    throw error;
});
function showHelp() {
    const options = Object.values(Preset)
        .map((preset) => `"${preset}"`)
        .join(', ');
    console.log(`
  Usage: create-nx-workspace <name> [options] [new workspace options]

  Create a new Nx workspace

  Options:

    name                      Workspace name (e.g., org name)

    preset                    What to create in a new workspace (options: ${options})

    appName                   The name of the application created by some presets

    cli                       CLI to power the Nx workspace (options: "nx", "angular")

    style                     Default style option to be used when a non-empty preset is selected
                              options: ("css", "scss", "less") plus ("styl") for all non-Angular and ("styled-components", "@emotion/styled", "styled-jsx") for React, Next.js, Gatsby

    interactive               Enable interactive mode when using presets (boolean)

    packageManager            Package manager to use (npm, yarn, pnpm)

    nx-cloud                  Use Nx Cloud (boolean)

    [new workspace options]   any 'new workspace' options
`);
}
function getConfiguration(parsedArgs) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        try {
            const name = yield determineWorkspaceName(parsedArgs);
            const preset = yield determinePreset(parsedArgs);
            const appName = yield determineAppName(preset, parsedArgs);
            const style = yield determineStyle(preset, parsedArgs);
            const cli = yield determineCli(preset, parsedArgs);
            const nxCloud = yield askAboutNxCloud(parsedArgs);
            return {
                name,
                preset,
                appName,
                style,
                cli,
                nxCloud,
            };
        }
        catch (e) {
            console.error(e);
            process.exit(1);
        }
    });
}
function determineWorkspaceName(parsedArgs) {
    const workspaceName = parsedArgs._[0]
        ? parsedArgs._[0]
        : parsedArgs.name;
    if (workspaceName) {
        return Promise.resolve(workspaceName);
    }
    return enquirer
        .prompt([
        {
            name: 'WorkspaceName',
            message: `Workspace name (e.g., org name)    `,
            type: 'input',
        },
    ])
        .then((a) => {
        if (!a.WorkspaceName) {
            output_1.output.error({
                title: 'Invalid workspace name',
                bodyLines: [`Workspace name cannot be empty`],
            });
            process.exit(1);
        }
        return a.WorkspaceName;
    });
}
function determinePreset(parsedArgs) {
    if (parsedArgs.preset) {
        if (Object.values(Preset).indexOf(parsedArgs.preset) === -1) {
            output_1.output.error({
                title: 'Invalid preset',
                bodyLines: [
                    `It must be one of the following:`,
                    '',
                    ...Object.values(Preset),
                ],
            });
            process.exit(1);
        }
        else {
            return Promise.resolve(parsedArgs.preset);
        }
    }
    return enquirer
        .prompt([
        {
            name: 'Preset',
            message: `What to create in the new workspace`,
            initial: 'empty',
            type: 'select',
            choices: presetOptions,
        },
    ])
        .then((a) => a.Preset);
}
function determineAppName(preset, parsedArgs) {
    if (preset === Preset.Empty || preset === Preset.NPM) {
        return Promise.resolve('');
    }
    if (parsedArgs.appName) {
        return Promise.resolve(parsedArgs.appName);
    }
    return enquirer
        .prompt([
        {
            name: 'AppName',
            message: `Application name                   `,
            type: 'input',
        },
    ])
        .then((a) => {
        if (!a.AppName) {
            output_1.output.error({
                title: 'Invalid name',
                bodyLines: [`Name cannot be empty`],
            });
            process.exit(1);
        }
        return a.AppName;
    });
}
function determineCli(preset, parsedArgs) {
    if (parsedArgs.cli) {
        if (['nx', 'angular'].indexOf(parsedArgs.cli) === -1) {
            output_1.output.error({
                title: 'Invalid cli',
                bodyLines: [`It must be one of the following:`, '', 'nx', 'angular'],
            });
            process.exit(1);
        }
        return Promise.resolve(parsedArgs.cli);
    }
    switch (preset) {
        case Preset.Angular:
        case Preset.AngularWithNest: {
            return Promise.resolve('angular');
        }
        default: {
            return Promise.resolve('nx');
        }
    }
}
function determineStyle(preset, parsedArgs) {
    if (preset === Preset.Empty ||
        preset === Preset.NPM ||
        preset === Preset.Nest ||
        preset === Preset.Express ||
        preset === Preset.ReactNative) {
        return Promise.resolve(null);
    }
    const choices = [
        {
            name: 'css',
            message: 'CSS',
        },
        {
            name: 'scss',
            message: 'SASS(.scss)       [ http://sass-lang.com   ]',
        },
        {
            name: 'less',
            message: 'LESS              [ http://lesscss.org     ]',
        },
    ];
    if (![Preset.Angular, Preset.AngularWithNest].includes(preset)) {
        choices.push({
            name: 'styl',
            message: 'Stylus(.styl)     [ http://stylus-lang.com ]',
        });
    }
    if ([
        Preset.ReactWithExpress,
        Preset.React,
        Preset.NextJs,
        Preset.Gatsby,
    ].includes(preset)) {
        choices.push({
            name: 'styled-components',
            message: 'styled-components [ https://styled-components.com            ]',
        }, {
            name: '@emotion/styled',
            message: 'emotion           [ https://emotion.sh                       ]',
        }, {
            name: 'styled-jsx',
            message: 'styled-jsx        [ https://www.npmjs.com/package/styled-jsx ]',
        });
    }
    if (!parsedArgs.style) {
        return enquirer
            .prompt([
            {
                name: 'style',
                message: `Default stylesheet format          `,
                initial: 'css',
                type: 'select',
                choices: choices,
            },
        ])
            .then((a) => a.style);
    }
    const foundStyle = choices.find((choice) => choice.name === parsedArgs.style);
    if (foundStyle === undefined) {
        output_1.output.error({
            title: 'Invalid style',
            bodyLines: [
                `It must be one of the following:`,
                '',
                ...choices.map((choice) => choice.name),
            ],
        });
        process.exit(1);
    }
    return Promise.resolve(parsedArgs.style);
}
function createSandbox(packageManager) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const installSpinner = ora(`Installing dependencies with ${packageManager}`).start();
        const tmpDir = tmp_1.dirSync().name;
        try {
            fs_1.writeFileSync(path.join(tmpDir, 'package.json'), JSON.stringify({
                dependencies: {
                    '@nrwl/workspace': nxVersion,
                    '@nrwl/tao': cliVersion,
                    typescript: tsVersion,
                    prettier: prettierVersion,
                },
                license: 'MIT',
            }));
            yield execAndWait(`${packageManager} install --silent`, tmpDir);
            installSpinner.succeed();
        }
        catch (e) {
            installSpinner.fail();
            output_1.output.error({
                title: `Nx failed to install dependencies`,
                bodyLines: [`Exit code: ${e.code}`, `Log file: ${e.logFile}`],
            });
            process.exit(1);
        }
        finally {
            installSpinner.stop();
        }
        return tmpDir;
    });
}
function createApp(tmpDir, name, packageManager, parsedArgs) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { _, cli } = parsedArgs, restArgs = tslib_1.__rest(parsedArgs, ["_", "cli"]);
        // Ensure to use packageManager for args
        // if it's not already passed in from previous process
        if (!restArgs.packageManager) {
            restArgs.packageManager = packageManager;
        }
        const args = shared_1.unparse(restArgs).join(' ');
        const pmc = package_manager_1.getPackageManagerCommand(packageManager);
        const command = `new ${name} ${args} --collection=@nrwl/workspace`;
        let nxWorkspaceRoot = `"${process.cwd().replace(/\\/g, '/')}"`;
        // If path contains spaces there is a problem in Windows for npm@6.
        // In this case we have to escape the wrapping quotes.
        if (process.platform === 'win32' &&
            /\s/.test(nxWorkspaceRoot) &&
            packageManager === 'npm') {
            const pmVersion = +package_manager_1.getPackageManagerVersion(packageManager).split('.')[0];
            if (pmVersion < 7) {
                nxWorkspaceRoot = `\\"${nxWorkspaceRoot.slice(1, -1)}\\"`;
            }
        }
        const fullCommandWithoutWorkspaceRoot = `${pmc.exec} tao ${command}/generators.json --cli=${cli}`;
        let workspaceSetupSpinner = ora('Creating your workspace').start();
        try {
            const fullCommand = `${fullCommandWithoutWorkspaceRoot} --nxWorkspaceRoot=${nxWorkspaceRoot}`;
            yield execAndWait(fullCommand, tmpDir);
            workspaceSetupSpinner.succeed('Nx has successfully created the workspace.');
        }
        catch (e) {
            workspaceSetupSpinner.fail();
            output_1.output.error({
                title: `Nx failed to create a workspace.`,
                bodyLines: [`Exit code: ${e.code}`, `Log file: ${e.logFile}`],
            });
            process.exit(1);
        }
        finally {
            workspaceSetupSpinner.stop();
        }
    });
}
function setupNxCloud(name, packageManager) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const nxCloudSpinner = ora(`Setting up NxCloud`).start();
        try {
            const pmc = package_manager_1.getPackageManagerCommand(packageManager);
            const res = yield execAndWait(`${pmc.exec} nx g @nrwl/nx-cloud:init --no-analytics`, path.join(process.cwd(), name));
            nxCloudSpinner.succeed('NxCloud has been set up successfully');
            return res;
        }
        catch (e) {
            nxCloudSpinner.fail();
            output_1.output.error({
                title: `Nx failed to setup NxCloud`,
                bodyLines: [`Exit code: ${e.code}`, `Log file: ${e.logFile}`],
            });
            process.exit(1);
        }
        finally {
            nxCloudSpinner.stop();
        }
    });
}
function printNxCloudSuccessMessage(nxCloudOut) {
    const bodyLines = nxCloudOut.split('Nx Cloud has been enabled')[1].trim();
    output_1.output.note({
        title: `Nx Cloud has been enabled`,
        bodyLines: bodyLines.split('\n').map((r) => r.trim()),
    });
}
function execAndWait(command, cwd) {
    return new Promise((res, rej) => {
        child_process_1.exec(command, { cwd }, (error, stdout, stderr) => {
            if (error) {
                const logFile = path.join(cwd, 'error.log');
                fs_1.writeFileSync(logFile, `${stdout}\n${stderr}`);
                rej({ code: error.code, logFile });
            }
            else {
                res({ code: 0, stdout });
            }
        });
    });
}
function askAboutNxCloud(parsedArgs) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (parsedArgs.nxCloud === undefined) {
            return enquirer
                .prompt([
                {
                    name: 'NxCloud',
                    message: `Use Nx Cloud? (It's free and doesn't require registration.)`,
                    type: 'select',
                    choices: [
                        {
                            name: 'Yes',
                            hint: 'Faster builds, run details, Github integration. Learn more at https://nx.app',
                        },
                        {
                            name: 'No',
                        },
                    ],
                    initial: 'No',
                },
            ])
                .then((a) => a.NxCloud === 'Yes');
        }
        else {
            return parsedArgs.nxCloud;
        }
    });
}
function pointToTutorialAndCourse(preset) {
    const title = `First time using Nx? Check out this interactive Nx tutorial.`;
    switch (preset) {
        case Preset.React:
        case Preset.ReactWithExpress:
        case Preset.NextJs:
        case Preset.Gatsby:
            output_1.output.addVerticalSeparator();
            output_1.output.note({
                title,
                bodyLines: [
                    `https://nx.dev/latest/react/tutorial/01-create-application`,
                    ...pointToFreeCourseOnEgghead(),
                ],
            });
            break;
        case Preset.Angular:
        case Preset.AngularWithNest:
            output_1.output.addVerticalSeparator();
            output_1.output.note({
                title,
                bodyLines: [
                    `https://nx.dev/latest/angular/tutorial/01-create-application`,
                    ...pointToFreeCourseOnYoutube(),
                ],
            });
            break;
        case Preset.Nest:
            output_1.output.addVerticalSeparator();
            output_1.output.note({
                title,
                bodyLines: [
                    `https://nx.dev/latest/node/tutorial/01-create-application`,
                    ...pointToFreeCourseOnYoutube(),
                ],
            });
            break;
    }
}
function pointToFreeCourseOnYoutube() {
    return [
        ``,
        `Prefer watching videos? Check out this free Nx course on YouTube.`,
        `https://www.youtube.com/watch?v=2mYLe9Kp9VM&list=PLakNactNC1dH38AfqmwabvOszDmKriGco`,
    ];
}
function pointToFreeCourseOnEgghead() {
    return [
        ``,
        `Prefer watching videos? Check out this free Nx course on Egghead.io.`,
        `https://egghead.io/playlists/scale-react-development-with-nx-4038`,
    ];
}
//# sourceMappingURL=create-nx-workspace.js.map